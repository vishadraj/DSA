ListNode fastPtr=  head;
ListNode slowPtr = head;
while(fastPtr != null && fastPrt.next!=null){
    fastPtr = fastPtr.next.next;
    slowPtr = slowPtr.next;
    if(slowPtr == fastPtr){
        return true;
    }
}
return false;


public boolean containsLoop(){
    ListNode fastPtr = head;
    ListNode sloPtr = head;

    while(fastPtr!=null && fastPtr.next!=null){
        fastPtr = fastPtr.next.next;
        slowPtr = slowPtr.next;

        if(fastPtr == slowPtr){
            return true;
        }
    }
    return false;
}

public void createALooplnLinkedLIst(){
    ListNode first = new ListNode(1);
    ListNode second = new ListNode(2);
    ListNode third = new ListNode(3);
    ListNode fourth = new ListNode(4);
    ListNode fifth = new ListNode(5);
    ListNode sixth = new ListNode(6);
    head = first;
    first.next = second;
    second.next = third;
    third.next = fourth;
    fourth.next = fifth;
    fifth.next = sixth;
    sixth.next= third;
}